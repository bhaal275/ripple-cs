namespace Ripple.Core.Tests.Unit.Core.Types.Shamap
{
    using System.Collections.Generic;

    using NUnit.Framework;

    using Org.BouncyCastle.Utilities.Encoders;

    using Ripple.Core.Core.Coretypes.Hash;
    using Ripple.Core.Core.Serialized;
    using Ripple.Core.Core.Types.Shamap;
    using Ripple.Core.Encodings.Common;

    [TestFixture]
    public class ShaMapTest
    {
        [Test]
        public void TestNibblet()
        {
            var ledgerIndex = "D66D0EC951FD5707633BEBE74DB18B6D2DDA6771BA0FBF079AD08BFDE6066056";
            Hash256 index = this.Hash(ledgerIndex);

            for (int i = 0; i < ledgerIndex.Length; i++)
            {
                int n1 = index.Nibblet(i);
                string s = n1.ToString("X").ToUpper();
                Assert.AreEqual(ledgerIndex.Substring(i, 1), s);
            }
        }

        [Test]
        public void TestArrayAssumptions()
        {
            string[] arr = new string[16];
            Assert.AreEqual(null, arr[0]);
            Assert.AreEqual(null, arr[15]);

            var nodes = new ShaMapNode[16];
            var item = this.CreateItem(ShaMapInnerNode.ZERO_256);

            var leaf = new ShaMapLeafNode(ShaMapInnerNode.ZERO_256, NodeType.tnTRANSACTION_MD, item);
            nodes[1] = leaf;
        }

        [Test]
        public void donTestLeafNodeHashing()
        {
            // Note that this is node starting with nibble `2` below
            byte[] tag = Hex.Decode("A197ECCF23E55193CBE292F7A373F0DE0F521D4DCAE32484E20EC634C1ACE528");
            byte[] node = Hex.Decode
            var shaMapLeafNode = new ShaMapLeafNode(new Hash256(tag), NodeType.tnTRANSACTION_MD, this.CreateItem(node));
        }

        [Test]
        public void TestShaMapDeepNodes()
        {
            Hash256 id1 = Hash("0000000000000000000000000000000000000000000000000000000000000000");
            Hash256 id2 = Hash("1000000000000000000000000000000000000000000000000000000000000000");
            Hash256 id3 = Hash("2100000000000000000000000000000000000000000000000000000000000000");
            Hash256 id4 = Hash("2110000000000000000000000000000000000000000000000000000000000000");
            Hash256 id5 = Hash("2120000000000000000000000000000000000000000000000000000000000000");
            Hash256 id6 = Hash("3000000000000000000000000000000000000000000000000000000000000000");

            this.EnsureUnique(id1, id2, id3, id4, id5, id6);

            IItem i1 = CreateItem(id1);
            IItem i2 = CreateItem(id1);
            IItem i3 = CreateItem(id1);
            IItem i4 = CreateItem(id1);
            IItem i5 = CreateItem(id1);
            IItem i6 = CreateItem(id1);

            var map = new ShaMap();

            map.AddItem(id1, NodeType.tnTRANSACTION_MD, i1);
            map.AddItem(id2, NodeType.tnTRANSACTION_MD, i2);
            map.AddItem(id3, NodeType.tnTRANSACTION_MD, i3);
            map.AddItem(id4, NodeType.tnTRANSACTION_MD, i4);
            map.AddItem(id5, NodeType.tnTRANSACTION_MD, i5);
            map.AddItem(id6, NodeType.tnTRANSACTION_MD, i6);

            Assert.IsTrue(map.branches[0] is ShaMapLeafNode);
            Assert.IsTrue(map.branches[1] is ShaMapLeafNode);
            Assert.IsTrue(map.branches[3] is ShaMapLeafNode);
            Assert.IsTrue(map.branches[1] is ShaMapLeafNode);
            Assert.IsTrue(map.branches[2] is ShaMapInnerNode);
            Assert.IsTrue(((ShaMapInnerNode)map.branches[2]).branches[1] is ShaMapInnerNode);
            Assert.IsTrue(map.branches[0] is ShaMapLeafNode);
        }

        [Test]
        public void TestLedgerHashing()
        {
            var tx1Hash = this.Hash("232E91912789EA1419679A4AA920C22CFC7C6B601751D6CBE89898C26D7F4394");

            var tx1 = Hex.Decode("120007220000000024000195F964400000170A53AC2065D5460561EC9DE000000000000000000000000000494C53000000000092D705968936C419CE614BF264B5EEB1CEA47FF468400000000000000A7321028472865AF4CB32AA285834B57576B7290AA8C31B459047DB27E16F418D6A71667447304502202ABE08D5E78D1E74A4C18F2714F64E87B8BD57444AFA5733109EB3C077077520022100DB335EE97386E4C0591CAC024D50E9230D8F171EEB901B5E5E4BD6D1E0AEF98C811439408A69F0895E62149CFCC006FB89FA7D1E6E5D");
            var tx1Meta = Hex.Decode

            var tx2Hash = this.Hash("A197ECCF23E55193CBE292F7A373F0DE0F521D4DCAE32484E20EC634C1ACE528");
            var tx2 = Hex.Decode("12000822000000002400113FCF201900113F3268400000000000000A73210256C64F0378DCCCB4E0224B36F7ED1E5586455FF105F760245ADB35A8B03A25FD7447304502200A8BED7B8955F45633BA4E9212CE386C397E32ACFF6ECE08EB74B5C86200C606022100EF62131FF50B288244D9AB6B3D18BACD44924D2BAEEF55E1B3232B7E033A27918114E0E893E991B2142E74486F7D3331CF711EA84213");
            var tx2Meta = Hex.Decode

            var n1 = this.CreateItem(tx1, tx1Meta);
            var n2 = this.CreateItem(tx2, tx2Meta);

            const string Node
            const string Node

            Assert.AreEqual(Node, B16.ToString(n1.Bytes));
            Assert.AreEqual(Node2, B16.ToString(n2.Bytes).ToUpper());

            var ledger = new ShaMap();
            ledger.AddItem(tx1Hash, NodeType.tnTRANSACTION_MD, n1);
            ledger.AddItem(tx2Hash, NodeType.tnTRANSACTION_MD, n2);

            const string Tnh = "7597469704639256442E505C2291DEDF8AEC835C974BC98545D490F462343178";
            var transactionHash = this.Hash(Tnh);

            Assert.IsTrue(transactionHash.Equals(ledger.Hash()));
        }

        private IItem CreateItem(byte[] tx, byte[] meta)
        {
            var bl = new BytesList();
            var s = new BinarySerializer(bl);
            s.AddLengthEncoded(tx);
            s.AddLengthEncoded(meta);
            var bytes = bl.Bytes();

            return new ByteItem(bytes);
        }

        private void EnsureUnique(params Hash256[] hashes)
        {
            var s = new List<string>();
            var n = 0;

            foreach (var hash in hashes)
            {
                n += 1;
                Assert.IsFalse(s.Contains(hash.ToString()), "The " + n + "th hash is a duplicate");
                s.Add(hash.ToString());
            }
        }

        private IItem CreateItem(Hash256 id)
        {
            return new HashItem(id);
        }

        private IItem CreateItem(byte[] bytes)
        {
            return new ByteItem(bytes);
        }


        private class ByteItem : IItem
        {
            public ByteItem(byte[] bytes)
            {
                this.Bytes = bytes;
            }

            public byte[] Bytes { get; private set; }
        }

        private class HashItem : IItem
        {
            private readonly Hash256 id;

            public HashItem(Hash256 id)
            {
                this.id = id;
            }

            public byte[] Bytes
            {
                get
                {
                    return this.id.Bytes;
                }
            }
        }

        private Hash256 Hash(string tnh)
        {
            return Hash256.OutTranslate.FromString(tnh);
        }
    }
}
